122,127c122
< 					obj = obj.replace(new RegExp('(["\\\\])', 'g'), '\\$1');
< 
< 					// flash does not handle %- characters well. transforms "50%" to "50pct" (a dirty hack, I admit)
< 					obj = obj.replace(/^\s?(\d+\.?\d*)%/, "$1pct")
< 
< 					return '"' +obj+ '"';
---
> 					return string2JsonString(obj);
195c190,194
< 						vars += k +'='+ (/function|object/.test(typeof val) ? f.asString(val) : val) + '&';
---
> 						vars += encodeURIComponent(k) +'='
> 							+ encodeURIComponent(/function|object/.test(typeof val)
> 																	 ? f.asString(val)
> 																	 : val)
> 																	 + '&';
199c198,200
< 				html += '<param name="flashvars" value=\'' + vars + '\' />';
---
> 				// vars' components are percent-encoded, and thus guaranteed to
> 				// not include any double-quotes
> 				html += '<param name="flashvars" value="' + vars + '" />';
285a287,317
> 	// From http://www.json.org/json2.js (declared in Public Domain)
> 	var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
> 			escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
> 			gap,
> 			indent,
> 			meta = {		// table of character substitutions
> 			'\b': '\\b',
> 			'\t': '\\t',
> 			'\n': '\\n',
> 			'\f': '\\f',
> 			'\r': '\\r',
> 			'"' : '\\"',
> 			'\\': '\\\\'},
> 			rep;
> 
> 
> 	function string2JsonString(string) {
> 		// If the string contains no control characters, no quote characters, and no
> 		// backslash characters, then we can safely slap some quotes around it.
> 		// Otherwise we must also replace the offending characters with safe escape
> 		// sequences.
> 		escapable.lastIndex = 0;
> 		return escapable.test(string) ?
> 				'"' + string.replace(escapable, function (a) {
> 						var c = meta[a];
> 						return typeof c === 'string' ? c :
> 								'\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
> 				}) + '"' :
> 				'"' + string + '"';
> 	}
> 
